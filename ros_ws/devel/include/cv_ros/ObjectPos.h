// Generated by gencpp from file cv_ros/ObjectPos.msg
// DO NOT EDIT!


#ifndef CV_ROS_MESSAGE_OBJECTPOS_H
#define CV_ROS_MESSAGE_OBJECTPOS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cv_ros
{
template <class ContainerAllocator>
struct ObjectPos_
{
  typedef ObjectPos_<ContainerAllocator> Type;

  ObjectPos_()
    : centroid()
    , plane_vector()  {
      centroid.assign(0.0);

      plane_vector.assign(0.0);
  }
  ObjectPos_(const ContainerAllocator& _alloc)
    : centroid()
    , plane_vector()  {
  (void)_alloc;
      centroid.assign(0.0);

      plane_vector.assign(0.0);
  }



   typedef boost::array<double, 3>  _centroid_type;
  _centroid_type centroid;

   typedef boost::array<double, 3>  _plane_vector_type;
  _plane_vector_type plane_vector;





  typedef boost::shared_ptr< ::cv_ros::ObjectPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_ros::ObjectPos_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectPos_

typedef ::cv_ros::ObjectPos_<std::allocator<void> > ObjectPos;

typedef boost::shared_ptr< ::cv_ros::ObjectPos > ObjectPosPtr;
typedef boost::shared_ptr< ::cv_ros::ObjectPos const> ObjectPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv_ros::ObjectPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv_ros::ObjectPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cv_ros::ObjectPos_<ContainerAllocator1> & lhs, const ::cv_ros::ObjectPos_<ContainerAllocator2> & rhs)
{
  return lhs.centroid == rhs.centroid &&
    lhs.plane_vector == rhs.plane_vector;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cv_ros::ObjectPos_<ContainerAllocator1> & lhs, const ::cv_ros::ObjectPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cv_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cv_ros::ObjectPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_ros::ObjectPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_ros::ObjectPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_ros::ObjectPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_ros::ObjectPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_ros::ObjectPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv_ros::ObjectPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5326c21eb2d7acd7c7195e7a2cc19f0";
  }

  static const char* value(const ::cv_ros::ObjectPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5326c21eb2d7acdULL;
  static const uint64_t static_value2 = 0x7c7195e7a2cc19f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_ros::ObjectPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv_ros/ObjectPos";
  }

  static const char* value(const ::cv_ros::ObjectPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv_ros::ObjectPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[3] centroid \n"
"float64[3] plane_vector\n"
;
  }

  static const char* value(const ::cv_ros::ObjectPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv_ros::ObjectPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centroid);
      stream.next(m.plane_vector);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_ros::ObjectPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv_ros::ObjectPos_<ContainerAllocator>& v)
  {
    s << indent << "centroid[]" << std::endl;
    for (size_t i = 0; i < v.centroid.size(); ++i)
    {
      s << indent << "  centroid[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.centroid[i]);
    }
    s << indent << "plane_vector[]" << std::endl;
    for (size_t i = 0; i < v.plane_vector.size(); ++i)
    {
      s << indent << "  plane_vector[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plane_vector[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_ROS_MESSAGE_OBJECTPOS_H
